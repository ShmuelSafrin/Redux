{"ast":null,"code":"const appReducer = (state = {\n  products: []\n}, action) => {\n  debugger;\n\n  switch (action.type) {\n    case \"ADD\":\n      return { ...state,\n        products: [...state.products, action.payload]\n      };\n\n    case \"DELETE\":\n      let name = action.payload.name;\n      let price = action.payload.price;\n      let arr = state.products;\n      let index = arr.findIndex(x => x.name == name && x.price == price);\n\n      if (index >= 0) {\n        arr.splice(index, 1);\n      }\n\n      return { ...state,\n        products: arr\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Full Stack/Redux/src/appReducer.js"],"names":["appReducer","state","products","action","type","payload","name","price","arr","index","findIndex","x","splice"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAG;AAAb,CAAT,EAA2BC,MAA3B,KACnB;AACI;;AACA,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,KAAL;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAWC,QAAAA,QAAQ,EAAG,CAAC,GAAGD,KAAK,CAACC,QAAV,EAAoBC,MAAM,CAACE,OAA3B;AAAtB,OAAP;;AAEJ,SAAK,QAAL;AACI,UAAIC,IAAI,GAAGH,MAAM,CAACE,OAAP,CAAeC,IAA1B;AACA,UAAIC,KAAK,GAAGJ,MAAM,CAACE,OAAP,CAAeE,KAA3B;AAEA,UAAIC,GAAG,GAAGP,KAAK,CAACC,QAAhB;AAEA,UAAIO,KAAK,GAAGD,GAAG,CAACE,SAAJ,CAAcC,CAAC,IAAIA,CAAC,CAACL,IAAF,IAAUA,IAAV,IAAkBK,CAAC,CAACJ,KAAF,IAAWA,KAAhD,CAAZ;;AACA,UAAGE,KAAK,IAAI,CAAZ,EACA;AACID,QAAAA,GAAG,CAACI,MAAJ,CAAWH,KAAX,EAAiB,CAAjB;AACH;;AACD,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,QAAQ,EAAGM;AAAtB,OAAP;;AAEJ;AACI,aAAOP,KAAP;AAnBR;AAqBH,CAxBD;;AA0BA,eAAeD,UAAf","sourcesContent":["const appReducer = (state = { products : []}, action) =>\r\n{\r\n    debugger;\r\n    switch(action.type)\r\n    {\r\n        case \"ADD\":\r\n            return {...state, products : [...state.products, action.payload ]}\r\n\r\n        case \"DELETE\":\r\n            let name = action.payload.name;\r\n            let price = action.payload.price;\r\n            \r\n            let arr = state.products;\r\n\r\n            let index = arr.findIndex(x => x.name == name && x.price == price)\r\n            if(index >= 0)\r\n            {\r\n                arr.splice(index,1)\r\n            }\r\n            return {...state, products : arr }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default appReducer"]},"metadata":{},"sourceType":"module"}